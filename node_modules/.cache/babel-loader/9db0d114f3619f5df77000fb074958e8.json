{"ast":null,"code":"import { createStore, createEvent } from \"effector\";\nexport const buyProduct = createEvent();\nexport const $cart = createStore([]).on(buyProduct, (state, product) => state.find(el => el.id === product.id) ? state : [...state, product]);","map":{"version":3,"sources":["/Users/s.shakirova/Desktop/GitHub/device/src/model/cart.ts"],"names":["createStore","createEvent","buyProduct","$cart","on","state","product","find","el","id"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,UAAzC;AAGA,OAAO,MAAMC,UAAU,GAAGD,WAAW,EAA9B;AAEP,OAAO,MAAME,KAAK,GAAGH,WAAW,CAAY,EAAZ,CAAX,CAClBI,EADkB,CACfF,UADe,EACH,CAACG,KAAD,EAAQC,OAAR,KACdD,KAAK,CAACE,IAAN,CAAYC,EAAD,IAAQA,EAAE,CAACC,EAAH,KAAUH,OAAO,CAACG,EAArC,IAA2CJ,KAA3C,GAAmD,CAAC,GAAGA,KAAJ,EAAWC,OAAX,CAFlC,CAAd","sourcesContent":["import { createStore, createEvent } from \"effector\";\nimport { IDevice } from '../data/devices';\n\nexport const buyProduct = createEvent<IDevice>();\n\nexport const $cart = createStore<IDevice[]>([])\n  .on(buyProduct, (state, product) =>\n    state.find((el) => el.id === product.id) ? state : [...state, product]\n  );\n"]},"metadata":{},"sourceType":"module"}