{"ast":null,"code":"import { createStore, createEvent } from 'effector';\nimport { devices } from '../data/devices';\nimport { filters, defaultFilters } from '../data/filters';\nimport { categories } from '../data/categories';\nexport const changeCurrentCategory = createEvent();\nexport const $categories = createStore({\n  categories: categories,\n  currentCategory: categories[1]\n}).on(changeCurrentCategory, (state, category) => ({ ...state,\n  currentCategory: category\n}));\nexport const changeFilters = createEvent();\nexport const $filters = createStore(defaultFilters).on(changeFilters, (_, payload) => payload);\nexport const filterByCategory = createEvent();\nexport const filterProducts = createEvent();\nexport const sortByLowerPrice = createEvent();\nexport const sortByHigherPrice = createEvent();\nexport const sortByNovelty = createEvent();\nexport const resetProducts = createEvent();\nexport const $products = createStore(devices).on(filterByCategory, (products, category) => products.filter(product => product.category === category)).on(filterProducts, (products, currentFilters) => {\n  return products.filter(product => {\n    var _product$colors, _product$colors2;\n\n    // if (product.price < currentFilters.price.min) return false;\n    // if (product.price > currentFilters.price.max) return false;\n    if (product.bluetooth && currentFilters.bluetooth === 'no') return false;\n    if (!product.bluetooth && currentFilters.bluetooth === 'yes') return false;\n    let colorCheck;\n    if (!currentFilters.colors.length && !((_product$colors = product.colors) !== null && _product$colors !== void 0 && _product$colors.length)) colorCheck = true;else if (currentFilters.colors.length && !((_product$colors2 = product.colors) !== null && _product$colors2 !== void 0 && _product$colors2.length)) colorCheck = false;else if (!currentFilters.colors.length && product.colors && product.colors.length) colorCheck = false;else {\n      const colors = filters.find(filter => filter.name === 'color').options;\n      colors.forEach(color => {\n        if (currentFilters.colors.includes(color.value) && product.colors && product.colors.includes(color.value)) colorCheck = true;\n      });\n    }\n    return colorCheck;\n  });\n}).on(sortByLowerPrice, products => [...products].sort((a, b) => a.price - b.price)).on(sortByHigherPrice, products => [...products].sort((a, b) => b.price - a.price)).on(sortByNovelty, products => [...products].sort((a, b) => a.isNew ? 0 : b.isNew ? 1 : -1)).reset(resetProducts);","map":{"version":3,"sources":["/Users/s.shakirova/Desktop/GitHub/device/src/model/products.ts"],"names":["createStore","createEvent","devices","filters","defaultFilters","categories","changeCurrentCategory","$categories","currentCategory","on","state","category","changeFilters","$filters","_","payload","filterByCategory","filterProducts","sortByLowerPrice","sortByHigherPrice","sortByNovelty","resetProducts","$products","products","filter","product","currentFilters","bluetooth","colorCheck","colors","length","find","name","options","forEach","color","includes","value","sort","a","b","price","isNew","reset"],"mappings":"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","sourcesContent":["import { createStore, createEvent } from 'effector';\nimport { devices, IDevice } from '../data/devices';\nimport { filters, defaultFilters, IDefaultFilters } from '../data/filters';\nimport { categories, ICategory } from '../data/categories';\n\nexport const changeCurrentCategory = createEvent<ICategory>();\nexport const $categories = createStore({\n  categories: categories,\n  currentCategory: categories[1]\n})\n  .on(changeCurrentCategory, (state, category) => ({\n    ...state, currentCategory: category\n  }));\n\nexport const changeFilters = createEvent<IDefaultFilters>();\nexport const $filters = createStore(defaultFilters)\n  .on(changeFilters, (_, payload) => payload);\n\nexport const filterByCategory = createEvent<string>();\nexport const filterProducts = createEvent<IDefaultFilters>();\nexport const sortByLowerPrice = createEvent();\nexport const sortByHigherPrice = createEvent();\nexport const sortByNovelty = createEvent();\nexport const resetProducts = createEvent();\n\nexport const $products = createStore<IDevice[]>(devices)\n  .on(filterByCategory, (products, category) =>\n    products.filter((product) => product.category === category)\n  )\n  .on(filterProducts, (products, currentFilters) => {\n    return products.filter((product) => {\n      // if (product.price < currentFilters.price.min) return false;\n      // if (product.price > currentFilters.price.max) return false;\n      if (product.bluetooth && currentFilters.bluetooth === 'no') return false;\n      if (!product.bluetooth && currentFilters.bluetooth === 'yes') return false;\n      let colorCheck;\n      if (!currentFilters.colors.length && !product.colors?.length) colorCheck = true;\n      else if (currentFilters.colors.length && !product.colors?.length) colorCheck = false;\n      else if (!currentFilters.colors.length && product.colors &&  product.colors.length) colorCheck = false;\n      else {\n        const colors = filters.find((filter) => filter.name === 'color')!.options;\n        colors!.forEach((color) => {\n          if (currentFilters.colors.includes(color.value) &&\n            product.colors && product.colors.includes(color.value)) colorCheck = true;\n        })\n      }\n      return colorCheck;\n    })\n  })\n  .on(sortByLowerPrice, (products) =>\n    [...products].sort((a, b) => a.price - b.price))\n  .on(sortByHigherPrice, (products) =>\n    [...products].sort((a, b) => b.price - a.price))\n  .on(sortByNovelty, (products) =>\n    [...products].sort((a, b) => a.isNew ? 0 : b.isNew ? 1 : -1))\n  .reset(resetProducts);\n"]},"metadata":{},"sourceType":"module"}