{"ast":null,"code":"import { createStore, createEffect, createEvent } from 'effector';\nexport const loadUsers = createEffect(async () => {\n  const req = await fetch('https://jsonplaceholder.typicode.com/users');\n  if (req.ok) return req.json();else return [];\n});\nexport const findUser = createEvent();\nexport const addUser = createEvent(); // @ts-ignore\n\nexport const $users = createStore({\n  userList: [],\n  currentUser: {},\n  isLogged: false\n}).on(loadUsers.doneData, (state, payload) => {\n  state.userList = payload;\n}).on(findUser, (state, newUser) => {\n  // @ts-ignore\n  if (state.userList.find(user => user.name === newUser.name)) {\n    state.currentUser = newUser;\n    state.isLogged = true;\n  }\n}).on(addUser, (state, newUser) => {\n  // @ts-ignore\n  state.userList = [...state.userList, newUser];\n  state.currentUser = newUser;\n  state.isLogged = true;\n});","map":{"version":3,"sources":["/Users/s.shakirova/Desktop/GitHub/device/src/model/users.ts"],"names":["createStore","createEffect","createEvent","loadUsers","req","fetch","ok","json","findUser","addUser","$users","userList","currentUser","isLogged","on","doneData","state","payload","newUser","find","user","name"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,EAAoCC,WAApC,QAAuD,UAAvD;AASA,OAAO,MAAMC,SAAS,GAAGF,YAAY,CAAC,YAAY;AAChD,QAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;AACA,MAAID,GAAG,CAACE,EAAR,EAAY,OAAOF,GAAG,CAACG,IAAJ,EAAP,CAAZ,KACK,OAAO,EAAP;AACN,CAJoC,CAA9B;AAMP,OAAO,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACP,OAAO,MAAMO,OAAO,GAAGP,WAAW,EAA3B,C,CAEP;;AACA,OAAO,MAAMQ,MAAM,GAAGV,WAAW,CAAC;AAChCW,EAAAA,QAAQ,EAAE,EADsB;AAEhCC,EAAAA,WAAW,EAAE,EAFmB;AAGhCC,EAAAA,QAAQ,EAAE;AAHsB,CAAD,CAAX,CAKnBC,EALmB,CAKhBX,SAAS,CAACY,QALM,EAKI,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAACD,EAAAA,KAAK,CAACL,QAAN,GAAiBM,OAAjB;AAAyB,CALlD,EAMnBH,EANmB,CAMhBN,QANgB,EAMN,CAACQ,KAAD,EAAQE,OAAR,KAAoB;AAChC;AACA,MAAIF,KAAK,CAACL,QAAN,CAAeQ,IAAf,CAAqBC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcH,OAAO,CAACG,IAApD,CAAJ,EAA+D;AAC7DL,IAAAA,KAAK,CAACJ,WAAN,GAAoBM,OAApB;AACAF,IAAAA,KAAK,CAACH,QAAN,GAAiB,IAAjB;AACD;AACF,CAZmB,EAanBC,EAbmB,CAahBL,OAbgB,EAaP,CAACO,KAAD,EAAQE,OAAR,KAAoB;AAC/B;AACAF,EAAAA,KAAK,CAACL,QAAN,GAAiB,CAAC,GAAGK,KAAK,CAACL,QAAV,EAAoBO,OAApB,CAAjB;AACAF,EAAAA,KAAK,CAACJ,WAAN,GAAoBM,OAApB;AACAF,EAAAA,KAAK,CAACH,QAAN,GAAiB,IAAjB;AACD,CAlBmB,CAAf","sourcesContent":["import { createStore, createEffect, createEvent } from 'effector';\n\nexport interface IUser {\n  name: string;\n  password: string;\n  email?: string;\n  phone?: string;\n}\n\nexport const loadUsers = createEffect(async () => {\n  const req = await fetch('https://jsonplaceholder.typicode.com/users');\n  if (req.ok) return req.json();\n  else return [];\n});\n\nexport const findUser = createEvent<IUser>();\nexport const addUser = createEvent<IUser>();\n\n// @ts-ignore\nexport const $users = createStore({\n  userList: [],\n  currentUser: {},\n  isLogged: false\n})\n  .on(loadUsers.doneData, (state, payload) => {state.userList = payload})\n  .on(findUser, (state, newUser) => {\n    // @ts-ignore\n    if (state.userList.find((user) => user.name === newUser.name)) {\n      state.currentUser = newUser;\n      state.isLogged = true;\n    }\n  })\n  .on(addUser, (state, newUser) => {\n    // @ts-ignore\n    state.userList = [...state.userList, newUser];\n    state.currentUser = newUser;\n    state.isLogged = true;\n  });\n"]},"metadata":{},"sourceType":"module"}