{"ast":null,"code":"import { createStore, createEffect, createEvent } from 'effector';\nexport const loadUsers = createEffect(async () => {\n  const req = await fetch('https://jsonplaceholder.typicode.com/users');\n  if (req.ok) return req.json();else console.log('Something goes wrong...');\n});\nexport const findUser = createEvent(); // @ts-ignore\n\nexport const $users = createStore([]).on(loadUsers.doneData, (_, payload) => {\n  console.log(payload);\n  return payload;\n}).on(findUser, (userList, newUser) => {\n  // @ts-ignore\n  userList.find(user => user.name === newUser.name);\n});","map":{"version":3,"sources":["/Users/s.shakirova/Desktop/GitHub/device/src/model/users.ts"],"names":["createStore","createEffect","createEvent","loadUsers","req","fetch","ok","json","console","log","findUser","$users","on","doneData","_","payload","userList","newUser","find","user","name"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,EAAoCC,WAApC,QAAuD,UAAvD;AAQA,OAAO,MAAMC,SAAS,GAAGF,YAAY,CAAC,YAAY;AAChD,QAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;AACA,MAAID,GAAG,CAACE,EAAR,EAAY,OAAOF,GAAG,CAACG,IAAJ,EAAP,CAAZ,KACKC,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACN,CAJoC,CAA9B;AAMP,OAAO,MAAMC,QAAQ,GAAGR,WAAW,EAA5B,C,CAEP;;AACA,OAAO,MAAMS,MAAM,GAAGX,WAAW,CAAC,EAAD,CAAX,CACnBY,EADmB,CAChBT,SAAS,CAACU,QADM,EACI,CAACC,CAAD,EAAIC,OAAJ,KAAgB;AACtCP,EAAAA,OAAO,CAACC,GAAR,CAAYM,OAAZ;AACA,SAAOA,OAAP;AACD,CAJmB,EAKnBH,EALmB,CAKhBF,QALgB,EAKN,CAACM,QAAD,EAAWC,OAAX,KAAuB;AACnC;AACAD,EAAAA,QAAQ,CAACE,IAAT,CAAeC,IAAD,IAAUA,IAAI,CAACC,IAAL,KAAcH,OAAO,CAACG,IAA9C;AACD,CARmB,CAAf","sourcesContent":["import { createStore, createEffect, createEvent } from 'effector';\n\nexport interface IUser {\n  name: string;\n  password: string;\n  email?: string;\n}\n\nexport const loadUsers = createEffect(async () => {\n  const req = await fetch('https://jsonplaceholder.typicode.com/users');\n  if (req.ok) return req.json();\n  else console.log('Something goes wrong...');\n});\n\nexport const findUser = createEvent<IUser>();\n\n// @ts-ignore\nexport const $users = createStore([])\n  .on(loadUsers.doneData, (_, payload) => {\n    console.log(payload);\n    return payload;\n  })\n  .on(findUser, (userList, newUser) => {\n    // @ts-ignore\n    userList.find((user) => user.name === newUser.name)\n  });\n"]},"metadata":{},"sourceType":"module"}