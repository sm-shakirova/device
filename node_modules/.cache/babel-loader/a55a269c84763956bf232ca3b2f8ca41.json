{"ast":null,"code":"import { createStore, createEffect, createEvent } from 'effector';\nexport const loadUsers = createEffect(async () => {\n  const req = await fetch('https://jsonplaceholder.typicode.com/users');\n  if (req.ok) return req.json();else return [];\n});\nexport const findUser = createEvent();\nexport const addUser = createEvent();\nexport const setErrorAlert = createEvent();\nexport const logOut = createEvent(); // @ts-ignore\n\nexport const $users = createStore({\n  userList: [],\n  currentUser: {\n    name: ''\n  },\n  isLogged: false,\n  loginError: true\n}).on(loadUsers.doneData, (state, payload) => {\n  state.userList = payload;\n}).on(findUser, (state, newUser) => // @ts-ignore\nstate.userList.find(user => user.name === newUser.name) ? { ...state,\n  currentUser: newUser,\n  isLogged: true,\n  loginError: false\n} : { ...state,\n  loginError: true\n}).on(addUser, (state, newUser) => {\n  // @ts-ignore\n  return {\n    userList: [...state.userList, newUser],\n    currentUser: newUser,\n    isLogged: true,\n    loginError: false\n  };\n}).on(setErrorAlert, (state, payload) => {\n  return { ...state,\n    loginError: payload\n  };\n}).on(logOut, state => {\n  return { ...state,\n    currentUser: {\n      name: ''\n    },\n    isLogged: false,\n    loginError: false\n  };\n});\n$users.watch(state => {\n  console.log(state);\n});","map":{"version":3,"sources":["/Users/s.shakirova/Desktop/GitHub/device/src/model/users.ts"],"names":["createStore","createEffect","createEvent","loadUsers","req","fetch","ok","json","findUser","addUser","setErrorAlert","logOut","$users","userList","currentUser","name","isLogged","loginError","on","doneData","state","payload","newUser","find","user","watch","console","log"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,EAAoCC,WAApC,QAAuD,UAAvD;AASA,OAAO,MAAMC,SAAS,GAAGF,YAAY,CAAC,YAAY;AAChD,QAAMG,GAAG,GAAG,MAAMC,KAAK,CAAC,4CAAD,CAAvB;AACA,MAAID,GAAG,CAACE,EAAR,EAAY,OAAOF,GAAG,CAACG,IAAJ,EAAP,CAAZ,KACK,OAAO,EAAP;AACN,CAJoC,CAA9B;AAMP,OAAO,MAAMC,QAAQ,GAAGN,WAAW,EAA5B;AACP,OAAO,MAAMO,OAAO,GAAGP,WAAW,EAA3B;AACP,OAAO,MAAMQ,aAAa,GAAGR,WAAW,EAAjC;AACP,OAAO,MAAMS,MAAM,GAAGT,WAAW,EAA1B,C,CAEP;;AACA,OAAO,MAAMU,MAAM,GAAGZ,WAAW,CAAC;AAChCa,EAAAA,QAAQ,EAAE,EADsB;AAEhCC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,IAAI,EAAE;AAAR,GAFmB;AAGhCC,EAAAA,QAAQ,EAAE,KAHsB;AAIhCC,EAAAA,UAAU,EAAE;AAJoB,CAAD,CAAX,CAMnBC,EANmB,CAMhBf,SAAS,CAACgB,QANM,EAMI,CAACC,KAAD,EAAQC,OAAR,KAAoB;AAC1CD,EAAAA,KAAK,CAACP,QAAN,GAAiBQ,OAAjB;AACD,CARmB,EASnBH,EATmB,CAShBV,QATgB,EASN,CAACY,KAAD,EAAQE,OAAR,KACZ;AACAF,KAAK,CAACP,QAAN,CAAeU,IAAf,CAAqBC,IAAD,IAAUA,IAAI,CAACT,IAAL,KAAcO,OAAO,CAACP,IAApD,IACE,EAAE,GAAGK,KAAL;AACEN,EAAAA,WAAW,EAAEQ,OADf;AAEEN,EAAAA,QAAQ,EAAE,IAFZ;AAGEC,EAAAA,UAAU,EAAE;AAHd,CADF,GAKE,EAAE,GAAGG,KAAL;AACEH,EAAAA,UAAU,EAAE;AADd,CAhBgB,EAmBnBC,EAnBmB,CAmBhBT,OAnBgB,EAmBP,CAACW,KAAD,EAAQE,OAAR,KAAoB;AAC/B;AACA,SAAO;AACLT,IAAAA,QAAQ,EAAE,CAAC,GAAGO,KAAK,CAACP,QAAV,EAAoBS,OAApB,CADL;AAELR,IAAAA,WAAW,EAAEQ,OAFR;AAGLN,IAAAA,QAAQ,EAAE,IAHL;AAILC,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD,CA3BmB,EA4BnBC,EA5BmB,CA4BhBR,aA5BgB,EA4BD,CAACU,KAAD,EAAQC,OAAR,KAAoB;AACrC,SAAO,EACL,GAAGD,KADE;AAELH,IAAAA,UAAU,EAAEI;AAFP,GAAP;AAID,CAjCmB,EAkCnBH,EAlCmB,CAkChBP,MAlCgB,EAkCPS,KAAD,IAAW;AACrB,SAAO,EACL,GAAGA,KADE;AAELN,IAAAA,WAAW,EAAE;AAACC,MAAAA,IAAI,EAAE;AAAP,KAFR;AAGLC,IAAAA,QAAQ,EAAE,KAHL;AAILC,IAAAA,UAAU,EAAE;AAJP,GAAP;AAMD,CAzCmB,CAAf;AA2CPL,MAAM,CAACa,KAAP,CAAaL,KAAK,IAAI;AACpBM,EAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ;AACD,CAFD","sourcesContent":["import { createStore, createEffect, createEvent } from 'effector';\n\nexport interface IUser {\n  name: string;\n  password: string;\n  email?: string;\n  phone?: string;\n}\n\nexport const loadUsers = createEffect(async () => {\n  const req = await fetch('https://jsonplaceholder.typicode.com/users');\n  if (req.ok) return req.json();\n  else return [];\n});\n\nexport const findUser = createEvent<IUser>();\nexport const addUser = createEvent<IUser>();\nexport const setErrorAlert = createEvent<boolean>();\nexport const logOut = createEvent();\n\n// @ts-ignore\nexport const $users = createStore({\n  userList: [],\n  currentUser: { name: '' },\n  isLogged: false,\n  loginError: true\n})\n  .on(loadUsers.doneData, (state, payload) => {\n    state.userList = payload;\n  })\n  .on(findUser, (state, newUser) =>\n    // @ts-ignore\n    state.userList.find((user) => user.name === newUser.name) ?\n      { ...state,\n        currentUser: newUser,\n        isLogged: true,\n        loginError: false } :\n      { ...state,\n        loginError: true }\n  )\n  .on(addUser, (state, newUser) => {\n    // @ts-ignore\n    return {\n      userList: [...state.userList, newUser],\n      currentUser: newUser,\n      isLogged: true,\n      loginError: false\n    }\n  })\n  .on(setErrorAlert, (state, payload) => {\n    return {\n      ...state,\n      loginError: payload,\n    }\n  })\n  .on(logOut, (state) => {\n    return {\n      ...state,\n      currentUser: {name: ''},\n      isLogged: false,\n      loginError: false\n    }\n  });\n\n$users.watch(state => {\n  console.log(state)\n});\n"]},"metadata":{},"sourceType":"module"}